#version 450

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(set = 0, binding = 0, rgba8) uniform writeonly image2D img;

layout(binding = 1) uniform UniformBufferObject {
    vec3 camPos;
    float time;
} ubo;

#define MAX_STEPS 100
#define MAX_DISTANCE 100.
#define DISTANCE_THRESH .01


float getDistMandelbulb(vec3 pos) {
    float Power = 10 * sin(ubo.time/10);;
	vec3 z = pos;
	float dr = 1.0;
	float r = 0.0;
	for (int i = 0; i < 20 ; i++) {
		r = length(z);
		if (r>2) break;
		
		// convert to polar coordinates
		float theta = acos(z.z/r);
		float phi = atan(z.y,z.x);
		dr =  pow( r, Power-1.0)*Power*dr + 1.0;
		
		// scale and rotate the point
		float zr = pow( r,Power);
		theta = theta*Power;
		phi = phi*Power;
		
		// convert back to cartesian coordinates
		z = zr*vec3(sin(theta)*cos(phi), sin(phi)*sin(theta), cos(theta));
		z+=pos;
	}
	return 0.5*log(r)*r/dr;
}

//Get distanse from point p to the scene.
float getDist(vec3 p) {
    float mandelbulbDist = getDistMandelbulb((p - vec3(0, 1 , 3)));
    return mandelbulbDist;
}


float rayMarch(vec3 ro, vec3 rd) {
    float dO = 0;
    for(int i = 0; i< MAX_STEPS; i++){
        vec3 p = ro + rd*dO;
        float ds = getDist(p);
        dO += ds;
        if (dO > MAX_DISTANCE || ds < DISTANCE_THRESH) {
            break;
        }
    }
    return dO;
}

vec3 getNormal(vec3 p) {
    float d = getDist(p);
    vec2 e = vec2(.01, 0);
    vec3 n = d - vec3(
        getDist(p - e.xyy),
        getDist(p - e.yxy),
        getDist(p - e.yyx)
    );
    return normalize(n);
}

float shadow( in vec3 ro, in vec3 rd, float k)
{
    float res = 1.0;
    for( float t=0; t<MAX_STEPS; )
    {
        float h = getDist(ro + rd*t);
        if( h<0.001 )
            return 0.0;
        res = min( res, k*h/t );
        t += h;
    }
    return res;
}

float getLight(vec3 p) {
    vec3 lightPos = vec3(0,5,2);
    //lightPos.xz += vec2(sin(time), cos(time));
    vec3 l = normalize(lightPos - p);
    vec3 n = getNormal(p);

    float dif = clamp(dot(n,l), 0, 1);
    return dif;
}



void main()
{   
    vec2 uv = (gl_GlobalInvocationID.xy + vec2(0.5)) / vec2(imageSize(img));

    // position of the camera.
    vec3 ro = ubo.camPos.zxy * vec3(-1, 1, 1);
    // ray direction.
    vec3 rd = normalize(vec3(uv.xy,1));
    // Distance to the intersection with the scene.
    float d = rayMarch(ro, rd);
    // Point of intersection
    vec3 p = ro + rd * d;

    float dif = getLight(p);
    
    vec3 col = vec3(dif);

    vec4 to_write = vec4(col, 1.0);
    imageStore(img, ivec2(gl_GlobalInvocationID.xy), to_write);
}

